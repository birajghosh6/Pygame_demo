from curses import KEY_RIGHT
import pygame as pg
from pygame import mixer
import random
from os import path
import os
from collections import deque
import math

pg.init()

# create the screen
screen = pg.display.set_mode((800,600))

background_img = pg.image.load(path.abspath('./Lib/site-packages/background.jpg'))
mixer.music.load(path.abspath('./Lib/site-packages/background.wav'))
mixer.music.play(-1)

# Title and icon
pg.display.set_caption('Space Invaders')

icon = pg.image.load(path.abspath('./Lib/site-packages/si.png'))
pg.display.set_icon(icon)


player_img = pg.image.load(path.abspath('./Lib/site-packages/player.png'))
player_X = 368
player_Y = 480
player_dX = 0


alien_img = []
alien_X = []
alien_Y = []
alien_dX = []
alien_dY = []
num_enemies = 3

for i in range(num_enemies):
    alien_img.append(pg.image.load(path.abspath('./Lib/site-packages/alien.png')))
    alien_X.append(random.randint((0+64)+1,(800-64)-1))
    alien_Y.append(random.randint(50,150))
    alien_dX.append(0.3)
    alien_dY.append(40)

bullet_img = pg.image.load(path.abspath('./Lib/site-packages/bullet.png'))
bullet_X = 0
bullet_Y = 480
bullet_dX = 0
bullet_dY = 0.8
#ready: cannot see
#fire: moving,can see
bullet_state = 'ready'

# Score
score_val = 0
score_font = pg.font.Font('freesansbold.ttf',32)
font_X = 10
font_Y = 10


def load_score(coordinates:tuple):
    global score_val
    score = score_font.render('Score: '+str(score_val),True,(255,255,255))
    screen.blit(score,coordinates)

def load_player(coordinates:tuple):
    screen.blit(player_img,coordinates)

def load_alien(coordinates:tuple,i:int):
    screen.blit(alien_img[i],coordinates)

def fire_bullet(coordinates:tuple):
    player_width = 64
    bullet_width = 32
    x = coordinates[0] + player_width//2 - bullet_width//2
    y = coordinates[1] - bullet_width
    global bullet_state
    bullet_state = 'fire'
    screen.blit(bullet_img,(x,y))
    
def is_collision(obj_1_coordinates,obj_2_coordinates):
    # if pg.Rect.colliderect(alien,bullet):
    #     return True
    obj_1_center = (obj_1_coordinates[0]+32,obj_1_coordinates[1]+32)
    obj_2_center = (obj_2_coordinates[0]+16,obj_2_coordinates[1]+16)
    return math.dist(obj_1_center,obj_2_center) < 27

def load_game_over():
    game_over_font = pg.font.Font('freesansbold.ttf',64)
    game_over = game_over_font.render('GAME OVER',True,(255,255,255))
    screen.blit(game_over,(200,250))


#Game loop
running = True

movement_queue = []

while running:
    screen.fill(color=(200,200,250))
    screen.blit(background_img,(0,0))

    for event in pg.event.get():
        if event.type == pg.QUIT:
            running = False

        #if key is pressed, check whether its right or left
        if event.type == pg.KEYDOWN:
            if event.key in [pg.K_LEFT,pg.K_a]:
                player_dX = -0.3
                # movement_queue.append(event.key)
            if event.key in [pg.K_RIGHT,pg.K_d]:
                player_dX = 0.3
                # movement_queue.append(event.key)
            if event.key == pg.K_SPACE:
                if bullet_state == 'ready':
                    bullet_sound = mixer.Sound(path.abspath('./Lib/site-packages/laser.wav'))
                    bullet_sound.play()
                    bullet_X = player_X
                    fire_bullet((bullet_X,bullet_Y))
        if event.type == pg.KEYUP:
            # movement_queue.remove(event.key)
            if event.key in [pg.K_LEFT,pg.K_a,pg.K_RIGHT,pg.K_d]:
                player_dX = 0
        # if movement_queue.__len__() == 0:
        #     player_dX = 0
        # else:
        #     move = movement_queue[-1]
        #     if move == pg.K_LEFT or move == pg.K_a:
        #         player_dX -= 0.3
        #     else:
        #         player_dX += 0.3



    if 0<=player_X+player_dX<=800-64:
        player_X += player_dX

    for i in range(num_enemies):
        #game over
        if alien_Y[i] > 300:
            for j in range(num_enemies):
                alien_Y[j] = 2000
            load_game_over()
        if alien_X[i]+alien_dX[i]<=0:#hits left boundary
            alien_dX[i] = 0.3
            alien_Y[i] += alien_dY[i]
        elif alien_X[i]+alien_dX[i]>=800-64:#hits right boundary
            alien_dX[i] = -0.3
            alien_Y[i] += alien_dY[i]
        else:
            alien_X[i] += alien_dX[i]

        #check for collision
        collision = is_collision((alien_X[i],alien_Y[i]),(bullet_X,bullet_Y))
        if collision:
            explosion_sound = mixer.Sound(path.abspath('./Lib/site-packages/explosion.wav'))
            explosion_sound.play()
            bullet_Y = 480
            bullet_state = 'ready'
            score_val  += 1
            alien_X[i] = random.randint(0,800-64)
            alien_Y[i] = random.randint(50,150)

        load_alien((alien_X[i],alien_Y[i]),i)

    #bullet movement
    if bullet_Y <= 0:
        bullet_state = 'ready'
        bullet_Y = 480
    if bullet_state == 'fire':
        fire_bullet((bullet_X,bullet_Y))
        bullet_Y -= bullet_dY
 
    

    load_player((player_X,player_Y))
    load_score((font_X,font_Y))
    
    pg.display.update()

pg.quit()